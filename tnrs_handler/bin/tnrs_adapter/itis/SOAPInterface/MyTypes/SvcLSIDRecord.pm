package MyTypes::SvcLSIDRecord;
use strict;
use warnings;


__PACKAGE__->_set_element_form_qualified(1);

sub get_xmlns { 'http://data.itis_service.itis.usgs.org/xsd' };

our $XML_ATTRIBUTE_CLASS;
undef $XML_ATTRIBUTE_CLASS;

sub __get_attr_class {
    return $XML_ATTRIBUTE_CLASS;
}


use base qw(MyTypes::SvcTaxonomicBase);
# Variety: sequence
use Class::Std::Fast::Storable constructor => 'none';
use base qw(SOAP::WSDL::XSD::Typelib::ComplexType);

Class::Std::initialize();

{ # BLOCK to scope variables

my %tsn_of :ATTR(:get<tsn>);
my %authorship_of :ATTR(:get<authorship>);
my %genusPart_of :ATTR(:get<genusPart>);
my %infragenericEpithet_of :ATTR(:get<infragenericEpithet>);
my %infraspecificEpithet_of :ATTR(:get<infraspecificEpithet>);
my %lsid_of :ATTR(:get<lsid>);
my %lsidText_of :ATTR(:get<lsidText>);
my %nameComplete_of :ATTR(:get<nameComplete>);
my %nomenclaturalCode_of :ATTR(:get<nomenclaturalCode>);
my %rank_of :ATTR(:get<rank>);
my %rankString_of :ATTR(:get<rankString>);
my %specificEpithet_of :ATTR(:get<specificEpithet>);
my %uninomial_of :ATTR(:get<uninomial>);

__PACKAGE__->_factory(
    [ qw(        tsn
        authorship
        genusPart
        infragenericEpithet
        infraspecificEpithet
        lsid
        lsidText
        nameComplete
        nomenclaturalCode
        rank
        rankString
        specificEpithet
        uninomial

    ) ],
    {
        'tsn' => \%tsn_of,
        'authorship' => \%authorship_of,
        'genusPart' => \%genusPart_of,
        'infragenericEpithet' => \%infragenericEpithet_of,
        'infraspecificEpithet' => \%infraspecificEpithet_of,
        'lsid' => \%lsid_of,
        'lsidText' => \%lsidText_of,
        'nameComplete' => \%nameComplete_of,
        'nomenclaturalCode' => \%nomenclaturalCode_of,
        'rank' => \%rank_of,
        'rankString' => \%rankString_of,
        'specificEpithet' => \%specificEpithet_of,
        'uninomial' => \%uninomial_of,
    },
    {
        'tsn' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'authorship' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'genusPart' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'infragenericEpithet' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'infraspecificEpithet' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'lsid' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'lsidText' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'nameComplete' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'nomenclaturalCode' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'rank' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'rankString' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'specificEpithet' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
        'uninomial' => 'SOAP::WSDL::XSD::Typelib::Builtin::string',
    },
    {

        'tsn' => 'tsn',
        'authorship' => 'authorship',
        'genusPart' => 'genusPart',
        'infragenericEpithet' => 'infragenericEpithet',
        'infraspecificEpithet' => 'infraspecificEpithet',
        'lsid' => 'lsid',
        'lsidText' => 'lsidText',
        'nameComplete' => 'nameComplete',
        'nomenclaturalCode' => 'nomenclaturalCode',
        'rank' => 'rank',
        'rankString' => 'rankString',
        'specificEpithet' => 'specificEpithet',
        'uninomial' => 'uninomial',
    }
);

} # end BLOCK







1;


=pod

=head1 NAME

MyTypes::SvcLSIDRecord

=head1 DESCRIPTION

Perl data type class for the XML Schema defined complexType
SvcLSIDRecord from the namespace http://data.itis_service.itis.usgs.org/xsd.






=head2 PROPERTIES

The following properties may be accessed using get_PROPERTY / set_PROPERTY
methods:

=over

=item * authorship


=item * genusPart


=item * infragenericEpithet


=item * infraspecificEpithet


=item * lsid


=item * lsidText


=item * nameComplete


=item * nomenclaturalCode


=item * rank


=item * rankString


=item * specificEpithet


=item * uninomial




=back


=head1 METHODS

=head2 new

Constructor. The following data structure may be passed to new():

 { # MyTypes::SvcLSIDRecord
   authorship =>  $some_value, # string
   genusPart =>  $some_value, # string
   infragenericEpithet =>  $some_value, # string
   infraspecificEpithet =>  $some_value, # string
   lsid =>  $some_value, # string
   lsidText =>  $some_value, # string
   nameComplete =>  $some_value, # string
   nomenclaturalCode =>  $some_value, # string
   rank =>  $some_value, # string
   rankString =>  $some_value, # string
   specificEpithet =>  $some_value, # string
   uninomial =>  $some_value, # string
 },




=head1 AUTHOR

Generated by SOAP::WSDL

=cut

